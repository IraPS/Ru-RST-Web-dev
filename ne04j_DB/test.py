results_dicts = [
    {1: [1, 2], 2: [1, 2]},
     {1: [3, 4], 2: [5, 6]},
     {1: [5, 7, 8], 2: [9, 10]},
     {1: [1, 2], 2: [13, 14]}]


# texts_results = {1: [[1, 2], [3, 5, 6]], 2: [[9], [10, 11]]}

texts_results = {3: [[[3, 16, 'а если бы это был музей,'],
                      [3, 22, 'Создает ли это отложенный спрос?'],
                      [3, 27, '– однако это ведет к безработице и «остыванию» экономики.'],
                      [3, 32, '«рост ВВП на 0,2% – это показатель того, что экономика глубоко остыла».'],
                      [3, 48, '– если бы только это было в России.']],
                     [[3, 15, 'от которых в Москве за пять минут не осталось бы щепки –'],
                      [3, 2, 'Тем не менее экономика наших соседей идет ко дну.'],
                      [3, 21, 'и ощущение, что дно еще не достигнуто.'],
                      [3, 28, 'Причем даже достигнутое такой ценой сдерживание не сможет быть долгосрочным,'],
                      [3, 38, 'и не смогут их продать.'],
                      [3, 41, '##### Вопрос о том, есть кризис в Латвии, или его нет, в самой республике не задают:'],
                      [3, 53, 'Тем не менее сложности с экспортом продукции,'],
                      [3, 60, '– а ведь именно агрессивное кредитование конечных потребителей под залог и было одним из локомотивов развития не только строительной индустрии в этих странах, но и всей экономики.'],
                      [3, 61, 'Теперь же речь идет не просто о сокращениях в риелторских агентствах и просроченных кредитах, но и об общем снижении цен на недвижимость,'],
                      [3, 66, '##### Цены на жилье в Риге, например, не кажутся слишком высокими в сравнении с Москвой или другими крупными городами России,'],
                      [3, 70, 'если не раньше.'],
                      [3, 49, 'и не продавать']]]}

for text in texts_results.keys():
    res = '<p>Текст № {0}'.format(text) + '</p>\n'
    queries = texts_results[text]
    first_q = queries[0]
    #print(first_q)
    for i in range(len(first_q)):
        res_edus = []
        n = first_q[i][1]
        res_edus.append(first_q[i])
        found_all = True
        for j in range(1, len(queries)):
            goal = n+j
            ids = [q[1] for q in queries[j]]
            if goal not in ids:
                found_all = False
                break
            else:
                res_edus.append([n for n in queries[1] if n[1] == goal][0])
        res_edus = [n[2] for n in res_edus]
        if found_all:
            res += str(' '. join(res_edus))
            res += '\n'
    print(res)
